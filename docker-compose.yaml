version: '3'

services:

  gateway:
    image: traefik:latest
    container_name: restorio-gateway
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./restorio-gateway/traefic.yaml:/etc/traefik/traefik.yaml 
      - ./restorio-gateway/dynamic.yaml:/etc/traefik/dynamic.yaml
    
  auth:
    container_name: restorio-auth
    build: ./restorio-auth
    image: ghcr.io/developeerz/restorio-auth/restorio-auth:latest
    ports:
      - "8081:8081"
    volumes:
      - ./restorio-auth/logs:/var/log/restorio-auth
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SERVICE_NAME: restorio-auth

      SECRET_ACCESS: BcU8q58BtgWzIZ7KfjuQgf9YIEIbh8d/Y2EGPuh8Ui4=
      SECRET_REFRESH: cM4hNZ9z6uS49Q7Uo8Z7I0TvGYoJaCOhWwuY6U9D7QY=

      DB_HOST: postgres
      DB_USER: clients_admin
      DB_PASSWORD: password
      DB_NAME: clients
      DB_PORT: 5432

  telegram:
    container_name: restorio-telegram
    build: ./restorio-telegram
    image: ghcr.io/developeerz/restorio-telegram/restorio-telegram:latest
    volumes:
      - ./restorio-telegram/logs:/var/log/restorio-telegram
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SERVICE_NAME: restorio-telegram   
      BOT_TOKEN: 8082597348:AAGnqiXFaY7z6MsJQOGb3Mk8TcFRCwNkWqA
      TOPIC: TELEGRAM_TOPIC
      BROKERS: kafka:9092

  reserving:
    container_name: restorio-reserving
    build: ./restorio-reserving
    volumes:
      - ./restorio-reserving/logs:/var/log/restorio-reserving
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_USER: reserving_admin
      DB_PASSWORD: password
      DB_NAME: reserving
      DB_PORT: 5432
      TOPIC: TELEGRAM_TOPIC
      BROKERS: kafka:9092
    ports:
      - "8082:8082"

  postgres:
    container_name: postgres
    build: ./postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  frontend:
    container_name: restorio-frontend
    build:
      context: ./frontend/react_front
      dockerfile: Dockerfile
    image: ghcr.io/developeerz/frontend/restotio-frontend:latest
    volumes:
      - ./frontend/react_front:/app
      - /app/node_modules
    ports:
      - "3000:3000"  
      - "19000:19000"  
      - "19001:19001"  
    environment:
      - NODE_ENV=development
    command: npm start

  elasticsearch:
    container_name: elasticsearch
    build:
      context: restorio-logs/elasticsearch/
      dockerfile: Dockerfile
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - elk

  logstash:
    container_name: logstash
    build:
      context: restorio-logs/logstash/
      dockerfile: Dockerfile
    volumes:
      - ./restorio-logs/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
    ports:
      - 5044:5044
    depends_on:
      - elasticsearch
    networks:
      - elk

  kibana:
    container_name: kibana
    build:
      context: restorio-logs/kibana/
      dockerfile: Dockerfile
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - elk

  filebeat:
    container_name: filebeat
    build:
      context: restorio-logs/filebeat/
      dockerfile: Dockerfile
    user: root
    volumes:
      - ./restorio-logs/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./restorio-auth/logs:/var/log/restorio-auth:ro
      - ./restorio-telegram/logs:/var/log/restorio-telegram:ro
    environment:
      - LOGSTASH_HOSTS=logstash:5044
      - KIBANA_HOST=kibana:5601
    depends_on:
      - logstash
      - kibana
    networks:
      - elk
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - zookeeper

  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "kafka-topics --create --topic TELEGRAM_TOPIC --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1;
       sleep 10"

  reserving-migrate:
    image: migrate/migrate:v4.15.2
    container_name: reserving-migrate
    command: ["-path", "/migrations", "-database", "postgres://reserving_admin:password@postgres:5432/reserving?sslmode=disable", "up"]
    volumes:
      - ./restorio-reserving/reserving-service/db/migrations:/migrations
    depends_on:
      - postgres
      - reserving
  
  auth-migrate:
    image: migrate/migrate:v4.15.2
    container_name: auth-migrate
    command: ["-path", "/migrations", "-database", "postgres://clients_admin:password@postgres:5432/clients?sslmode=disable", "up"]
    volumes:
      - ./restorio-auth/db/migrations:/migrations
    depends_on:
      - postgres
      - auth
      
networks:
  elk:
    driver: bridge

volumes:
  postgres_data:
  